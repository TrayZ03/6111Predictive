"0","# create tibble of results for top 5 models"
"0",""
"0","top_lr_models <-"
"0","  lr_results %>% "
"0","  show_best(metric = ""roc_auc"", n = 5) %>% "
"0","  rename(Mean_CV_ROC_AUC=mean, Std_Err_CV_ROC_AUC=std_err, Hyperparameter_Value=penalty) %>%"
"0","  mutate(Hyperparameter=""Penalty"", Model=""Logistic Regression"") %>%"
"0","  select(Model, Hyperparameter, Hyperparameter_Value, Mean_CV_ROC_AUC, Std_Err_CV_ROC_AUC)"
"0",""
"0","top_knn_models <-"
"0","  knn_results %>% "
"0","  show_best(metric = ""roc_auc"", n = 5) %>%"
"0","  rename(Mean_CV_ROC_AUC=mean, Std_Err_CV_ROC_AUC=std_err, Hyperparameter_Value=neighbors) %>%"
"0","  mutate(Hyperparameter=""Neighbors"", Model=""K-Nearest Neighbors"") %>%"
"0","  select(Model, Hyperparameter, Hyperparameter_Value, Mean_CV_ROC_AUC, Std_Err_CV_ROC_AUC)"
"0",""
"0","top_nb_models <-"
"0","  nb_results %>% "
"0","  show_best(metric = ""roc_auc"", n = 5) %>%"
"0","  rename(Mean_CV_ROC_AUC=mean, Std_Err_CV_ROC_AUC=std_err, Hyperparameter_Value=smoothness) %>%"
"0","  mutate(Hyperparameter=""Smoothness"", Model=""Naive Bayes"") %>%"
"0","  select(Model, Hyperparameter, Hyperparameter_Value, Mean_CV_ROC_AUC, Std_Err_CV_ROC_AUC)"
"0",""
"0","top_rf_models <-"
"0","  rf_results %>% "
"0","  show_best(metric = ""roc_auc"", n = 5) %>%"
"0","  rename(Mean_CV_ROC_AUC=mean, Std_Err_CV_ROC_AUC=std_err, Hyperparameter_Value=mtry) %>%"
"0","  mutate(Hyperparameter=""NumPredictorsPerSplit"", Model=""Random Forest"") %>%"
"0","  select(Model, Hyperparameter, Hyperparameter_Value, Mean_CV_ROC_AUC, Std_Err_CV_ROC_AUC)"
"0",""
"0","top_xgb_models <-"
"0","  xgb_results %>% "
"0","  show_best(metric = ""roc_auc"", n = 5) %>%"
"0","  rename(Mean_CV_ROC_AUC=mean, Std_Err_CV_ROC_AUC=std_err, Hyperparameter_Value=trees) %>%"
"0","  mutate(Hyperparameter=""NumTrees"", Model=""XGBoost"") %>%"
"0","  select(Model, Hyperparameter, Hyperparameter_Value, Mean_CV_ROC_AUC, Std_Err_CV_ROC_AUC)"
"0",""
"0","top_models <- rbind(top_lr_models, top_knn_models, top_nb_models, top_rf_models, top_xgb_models) %>%"
"0","  arrange(desc(Mean_CV_ROC_AUC))"
"0",""
"0","# print result tibble"
"0","print(top_models)"
